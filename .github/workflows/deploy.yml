name: Deploy Pulumi Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      AWS_REGION: ap-southeast-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
        with:
          pulumi-version: 3.131.0 # Latest stable as of 2025

      - name: Initialize Pulumi project if missing
        run: |
          if [ ! -f Pulumi.yaml ]; then
            pulumi new aws-typescript --name pulumi-lambda-git \
              --description "Pulumi Lambda Deployment from Github" \
              --stack dev --yes --force
          fi

      - name: Install dependencies
        run: npm install @pulumi/aws @pulumi/pulumi

      - name: Create Lambda handler if missing
        run: |
          mkdir -p lambda
          if [ ! -f lambda/index.js ]; then
            cat << 'EOF' > lambda/index.js
            exports.handler = async (event) => {
              console.log("Event: ", event);
              return {
                  statusCode: 200,
                  body: JSON.stringify({ message: "Hello from Pulumi Lambda!" }),
              };
          };
          EOF
          fi

      - name: Create Pulumi infra file if missing
        run: |
          if [ ! -f index.ts ]; then
            cat << 'EOF' > index.ts
          import * as pulumi from "@pulumi/pulumi";
          import * as aws from "@pulumi/aws";
          
          // IAM Role for Lambda
          const role = new aws.iam.Role("lambdaRole", {
              assumeRolePolicy: JSON.stringify({
                  Version: "2012-10-17",
                  Statement: [{
                      Action: "sts:AssumeRole",
                      Principal: { Service: "lambda.amazonaws.com" },
                      Effect: "Allow",
                  }],
              }),
          });
          
          // Attach basic execution policy
          new aws.iam.RolePolicyAttachment("lambdaRolePolicy", {
              role: role.name,
              policyArn: "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          });
          
          // Lambda Function using local folder
          const lambdaFunc = new aws.lambda.Function("myLambda", {
              runtime: "nodejs20.x",
              code: new pulumi.asset.FileArchive("./lambda"),
              handler: "index.handler",
              role: role.arn,
          });
          
          // Export Lambda name
          export const lambdaName = lambdaFunc.name;
          EOF
          fi

      - name: Deploy with Pulumi
        run: pulumi up --yes
